(* (+ 22 42) (* 54 99))
(* (* (+ 22 42) 54) 99)
(+ (* 64 102) (* 16 (/ 44 22)))
(define limerick (+ (/ (+ 12 144 20 (* 3 (sqrt 4))) 7) (* 5 11)))
limerick
(define (inc x) (+ x 1))
(define (inc2 x) (inc (inc x)))
(inc 4)
(inc2 7)
(define (cube x) (* x x x))
(cube 2)
(define (p x) (* (+ (* x x x x x) (* 16 x x x x) (* 22 x x x) x 9)
                 (+ (* x x x x x) (* 16 x x x x) (* 22 x x x) x 9)))
(p 2)
(define (ninth x) (cube (cube x)))
(ninth 2)
(define (eighty-first x) (ninth (ninth x)))
(eighty-first 1.05)
(define (isbn10-checkdigit x10 x9 x8 x7 x6 x5 x4 x3 x2)
 (modulo (- 11 (modulo (+ (* 10 x10)
                     (* 9 x9)
                     (* 8 x8)
                     (* 7 x7)
                     (* 6 x6)
                     (* 5 x5)
                     (* 4 x4)
                     (* 3 x3)
                     (* 2 x2)) 11)) 11))
(define (is-isbn10? x10 x9 x8 x7 x6 x5 x4 x3 x2 x1)
  (= x1 (isbn10-checkdigit x10 x9 x8 x7 x6 x5 x4 x3 x2)))
(define (fspiral theta)
  (expt 1.618 (* theta (/ 2 3.142))))
(fspiral 4)
(define (discriminant a b c)
  (- (* b b)(* 4 a c)))
(define (root1 a b c)
  (/ (+ (- b) (sqrt (- (expt b 2) (* 4 a c)))) (* 2 a)))
(define (root2 a b c)
  (/ (- (- b) (sqrt (- (expt b 2) (* 4 a c)))) (* 2 a)))
(root1 1 -5 4)
(root2 1 -5 4)
(define (number-of-roots a b c)
  (if (= (discriminant a b c) 0)
      (1)
      2)
  )
(number-of-roots 1 -5 4)
(define (real-roots? a b c)
  (>= (discriminant a b c) 0))
(real-roots? 1 -5 4)
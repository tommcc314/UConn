(define (accumulate combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner (term a)
                (accumulate combiner null-value term (next a) next b))))
(define (sum term a next b)
  (accumulate + 0 term a next b))
(define (product term a next b)
  (accumulate * 1 term a next b))
(define (catalan n)
  (define (factorial n)
    (if (= n 0) 1
        (* n (factorial (- n 1)))))
  (accumulate + 0 (lambda (x) (/ (factorial (* 2 n))
                                 (* (factorial (+ n 1)) (factorial n))))
              n (lambda (x) (+ x 1)) n))
;(catalan 9)
(define (leibniz-pi n)
  (accumulate + 0 (lambda (x) (- (* (expt (- 1) x)
                                 (/ 1 (- (* 2 x) 1)))))
              1 (lambda (x) (+ x 1)) n))
;(leibniz-pi 30)
(define (accumulate-tr combiner null-value term a next b)
  (define (tr-iter combiner term a next b total)
    (if (> a b)
        total
        (tr-iter combiner term (next a) next b (combiner (term a) total))))
  (tr-iter combiner term a next b null-value))
(define (fact n)
  (accumulate-tr * 1
                 (lambda (x) (if (= x 0) 1 x)) 0 (lambda (x) (+ x 1)) n))
;(fact 5)
(define (e-to-x x n)
  (accumulate-tr + 0 (lambda (n) (if (= x 0) 1 (/ (expt x n) (fact n))))
                 0 (lambda (n) (+ n 1)) n))
;(e-to-x 8 20)
(define (encode p)
  (let ((x (car p))
        (y (cdr p)))
    (if (= x (max x y)) (+ (* x x) x y) (+ (* y y) x))))
(encode (cons 4 5))
(define (decode z)
  (let ((f (floor (sqrt z))))
    (if (< (- z (* f f)) f) (cons (- z (* f f)) f)
        (cons f (- z (* f f) f)))))
(decode 34)
(define (make-tree value left right) (list value left right))
(define (value tree) (car tree))
(define (left tree) (cadr tree))
(define (right tree) (caddr tree))
(define (tree-map T f)
  (if (null? T) '()
      (make-tree (f (value T)) (tree-map (left T) f) (tree-map (right T) f))))
;(tree-map (list 99 (list 15 (list) (list)) (list)) (lambda (x) (* x x)))
(define (tree-equal? Ta Tb)
  (cond ((and (null? Ta) (null? Tb)) #t)
        ((or (and (null? Ta) (not (null? Tb))) (and (not (null? Ta)) (null? Tb))) #f)
        ((eq? (value Ta) (value Tb)) #t)
        ((not (eq? (value Ta) (value Tb))) #f)
        ((and (tree-equal? (left Ta) (left Tb)) (tree-equal? (right Ta) (right Tb))))))
(define (insert-list insert-elements T)
  (define (insert-value x T)
    (cond ((null? T) (make-tree x '() '()))
          ((< x (value T)) (make-tree (value T) (insert-value x (left T)) (right T)))
          ((> x (value T)) (make-tree (value T) (left T) (insert-value x (right T))))
          (else T)))
  (if (null? insert-elements) T
      (insert-list (cdr insert-elements) (insert-value (car insert-elements) T))))
;(insert-list '(3 6 2 4 1 5 7) '())
(define (sort-extract T)
  (if (null? T) '()
      (append (sort-extract (left T))
              (list (value T))
              (sort-extract (right T)))))
(define (tree-sort elements)
  (sort-extract (insert-list elements '())))
;(tree-sort '(3 6 2 4 1 5 7))
(define (delete-value v T)
  (define (leftmost T)
    (cond ((null? T) '())
          ((null? (left T)) (value T))
          (else (leftmost (left T)))))
  (define (delete-node T)
    (cond ((and (null? (left T)) (null? (right T))) '())
          ((null? (left T)) (right T))
          ((null? (right T)) (left T))
          (else (make-tree (leftmost (right T)) (left T) (delete-value (leftmost (right T)) (right T))))))
  (cond ((null? T) '())
        ((= v (value T)) (delete-node T))
        ((< v (value T)) (make-tree (value T) (delete-value v (left T)) (right T)))
        (else (make-tree (value T) (left T) (delete-value v (right T))))))
;(delete-value 27 '(12 (6 (3 (2 (1 () ()) ()) (5 (4 () ()) ()))(9 (7 () (8 () ())) (10 () (11 () ()))))(18 (15 (13 () (14 () ())) ())(21 (19 () (20 () ())) (27 (25 () ()) (29 () ()))))))       
(define (arithvalue T)
  (cond ((and (null? (left T)) (null? (right T))) (value T))
        ((eq? (value T) #\+) (+ (arithvalue (left T)) (arithvalue (right T))))
        ((eq? (value T) #\*) (* (arithvalue (left T)) (arithvalue (right T))))
        ((eq? (value T) #\-) (- (arithvalue (left T))))
        (else (/ 1 (arithvalue (left T))))))
;(arithvalue (list #\+ (list #\* (list 4 '() '()) (list 5 '() '())) (list #\+ (list #\/ (list 6 '() '()) '()) (list 7 '() '()))))
(define (prepare x)
  (cond ((number? x) (number->string x))
        ((char? x) (string x))))
(define (convert-tree T)
  (tree-map T prepare))
(define (arith-prefix T)
  ;(define (prefix T)
  ;  (cond ((null? T) "")
  ;        (else (string-append (value T) (prefix (left T)) (prefix (right T))))))
  ;(prefix (convert-tree T)))
  (define (prepare x)
    (cond ((number? x) (number->string x))
          ((char? x) (string x))))

  (define (tree-map T f)
    (if (null? T)
        '()
        (make-tree (f (value T))
                   (tree-map (left T) f)
                   (tree-map (right T) f) ) ) )

  (let* ((tempvar (tree-map T prepare)))
    (if (null? tempvar)
      ""
      (string-append (value tempvar) (arith-prefix (left T)) (arith-prefix (right T))))))
(define (arith-postfix T)
  (define (postfix T)
    (cond ((null? T) "")
          (else (string-append (postfix (left T)) (postfix (right T)) (value T)))))
  (postfix (convert-tree T)))
(define (arith-infix T)
  (define (infix T)
    (cond ((null? T) "")
          ((equal? (value T) "+") (string-append "(" (infix (left T)) "+" (infix (right T)) ")"))
          ((equal? (value T) "*") (string-append "(" (infix (left T)) "*" (infix (right T)) ")"))
          ((equal? (value T) "-") (string-append "-(" (infix (left T)) ")"))
          ((equal? (value T) "/") (string-append "/(" (infix (left T)) ")"))
          (else (string-append (infix (left T)) (value T) (infix (right T))))))
  (infix (convert-tree T)))
;(convert-tree (list #\+ (list #\* (list 4 '() '()) (list 5 '() '())) (list #\+ (list #\/ (list 6 '() '()) '()) (list 7 '() '()))))
(arith-prefix (list #\+ (list #\* (list 4 '() '()) (list 5 '() '())) (list #\+ (list #\/ (list 6 '() '()) '()) (list 7 '() '()))))
(arith-prefix (list #\+ (list #\* (list 2 '() '()) (list 3 '() '())) (list #\* (list #\+ (list 4 '() '()) (list #\- (list 5 '() '()) '())) (list #\/ (list 6 '() '()) '()))))
(arith-postfix (list #\+ (list #\* (list 4 '() '()) (list 5 '() '())) (list #\+ (list #\/ (list 6 '() '()) '()) (list 7 '() '()))))
(arith-infix (list #\+ (list #\* (list 4 '() '()) (list 5 '() '())) (list #\+ (list #\/ (list 6 '() '()) '()) (list 7 '() '()))))
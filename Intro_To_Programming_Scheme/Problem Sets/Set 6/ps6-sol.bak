(define (zip a b)
  (if (null? (cdr a)) (cons (cons (car a) (car b)) '())
      (cons (cons (car a) (car b)) (zip (cdr a) (cdr b)))))
;(zip '(1 5 7 4 3) '(6 7 2 3 0))
(define (unzip list)
  (define (unzip-individual list x)
    (if (= x 0)
        (if (null? (cdr list)) (cons (car (car list)) '())
            (cons (car (car list)) (unzip-individual (cdr list) x)))
        (if (null? (cdr list)) (cons (cdr (car list)) '())
            (cons (cdr (car list)) (unzip-individual (cdr list) x)))))
  (cons (unzip-individual list 0) (unzip-individual list 1)))
;(unzip '((1 . 6) (5 . 7) (7 . 2) (4 . 3) (3 . 0)))
(define (list-sum x)
  (if (null? (cdr x)) (car x)
      (+ (car x) (list-sum (cdr x)))))
;(list-sum '(5 3 7 8 2))
(define (list-length x)
  (if (null? (cdr x)) 1
      (+ 1 (list-length (cdr x)))))
;(list-length '(5 3 7 8 2))
(define (average x)
  (/ (list-sum x) (list-length x)))
;(average '(5 3 7 8 2))
(define (var-map x)
  (map (lambda (xn) (expt (- xn (average x)) 2)) x))
;(var-map '(1 2 3 4 5))
(define (stdev x)
  (sqrt (/ (list-sum (var-map x)) (list-length x))))
;(stdev '(5 3 7 8 2))
(define (map2 f list1 list2)
  (if (null? (cdr list1)) (f (car list1) (car list2))
      (cons (f (car list1) (car list2))
            (map2 f (cdr list1) (cdr list2)))))
(define (covar-elements X Y)
  (let ((avg-x (average X))
        (avg-y (average Y)))
    (map2 (lambda (x y) (* (- x avg-x) (- y avg-y))) X Y)))
(covar-elements '(5 3 7 8 2) '(1 2 3 4 5))
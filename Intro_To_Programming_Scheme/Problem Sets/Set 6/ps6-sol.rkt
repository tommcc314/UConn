(define (zip a b)
  (cond ((null? a) '())
        ((null? (cdr a)) (cons (cons (car a) (car b)) '()))
        (else (cons (cons (car a) (car b)) (zip (cdr a) (cdr b))))))
;(zip (list) (list))
(define (unzip list)
  (define (unzip-individual list x)
    (if (= x 0)
        (if (null? (cdr list)) (cons (car (car list)) '())
            (cons (car (car list)) (unzip-individual (cdr list) x)))
        (if (null? (cdr list)) (cons (cdr (car list)) '())
            (cons (cdr (car list)) (unzip-individual (cdr list) x)))))
  (if (null? list) (cons list list)
  (cons (unzip-individual list 0) (unzip-individual list 1))))
;(unzip '((1 . 6) (5 . 7) (7 . 2) (4 . 3) (3 . 0)))
;(unzip (list))
(define (list-sum x)
  (cond ((null? x) 0)
        ((null? (cdr x)) (car x))
        (else (+ (car x) (list-sum (cdr x))))))
;(list-sum '(5 3 7 8 2))
;(list-sum (list))
(define (list-length x)
  (if (null? (cdr x)) 1
      (+ 1 (list-length (cdr x)))))
;(list-length '(5 3 7 8 2))
(define (average x)
  (/ (list-sum x) (list-length x)))
;(average '(5 3 7 8 2))
(define (var-map x)
  (map (lambda (xn) (expt (- xn (average x)) 2)) x))
;(var-map '(1 2 3 4 5))
(define (stdev x)
  (sqrt (/ (list-sum (var-map x)) (list-length x))))
;(stdev '(5 3 7 8 2))
(define (map2 f list1 list2)
  (cond ((null? list1) (list))
        ((null? (cdr list1)) (cons (f (car list1) (car list2)) '()))
        (else (cons (f (car list1) (car list2))
            (map2 f (cdr list1) (cdr list2))))))
;(map2 (lambda (x y) (+ x y)) (list) (list))
(define (covar-elements X Y)
  (let ((avg-x (average X))
        (avg-y (average Y)))
    (map2 (lambda (x y) (* (- x avg-x) (- y avg-y))) X Y)))
;(covar-elements '(5 3 7 8 2) '(1 2 3 4 5))
(define (pearson X Y)
  (/ (list-sum (covar-elements X Y)) (* (list-length X) (stdev X) (stdev Y))))
;(pearson '(160 186 172 202 177 186 191) '(51 79 69 100 66 80 83))
(define (best-fit X Y)
  (let* ((a (* (pearson X Y) (/ (stdev Y) (stdev X))))
         (b (- (average Y) (* a (average X)))))
    (cons a b)))
;(best-fit '(160 180 200 220 240 260 280) '(126 103 82 75 78 40 20))
(define (best-fit-fn pX pY)
  (lambda (x) (+ (* (car (best-fit pX pY)) x) (cdr (best-fit pX pY)))))
;((best-fit-fn '(5 3 7 8 2) '(1 2 3 4 5)) 8)
(define (remove v elements)
  (if (null? elements) elements
      (if (equal? v (car elements))
          (cdr elements)
          (cons (car elements) (remove v (cdr elements))))))
(define (count-elements v elements)
  (if (equal? elements (remove v elements)) 0
      (+ 1 (count-elements v (remove v elements)))))
(define (remove-all v elements)
  (if (equal? elements (remove v elements)) elements
      (remove-all v (remove v elements))))
;(remove-all #\l (string->list "hello"))
;(count-elements #\l (string->list "hello"))
(define (get-count text)
  (define (get-car v elements)
    (cons v (count-elements v elements)))
  (define (get-count-list elements)
    (if (null? elements) '()
        (cons (get-car (car elements) elements) (get-count-list (remove-all (car elements) elements)))))
  (get-count-list (string->list text)))
(define (get-freq count)
  (define (get-total count)
    (if (null? count) 0
        (+ 0 (cdar count) (get-total (cdr count)))))
  (define (create-freq count total)
    (if (null? count) '()
        (cons (cons (caar count) (/ (cdar count) total)) (create-freq (cdr count) total))))
  (create-freq count (get-total count)))
;(get-freq (get-count "hello"))

(define (htree-leaf letter weight) (list 'leaf weight letter))
(define (htree-node t0 t1) (list 'internal (+ (htree-weight t0) (htree-weight t1)) t0 t1))
(define (htree-node-t0 t) (caddr t))
(define (htree-node-t1 t) (cadddr t))
(define (htree-weight t) (cadr t))
(define (sort-leaves count)
  (define (smallest count)
    (define (smaller a b) (if (< (cadr a) (cadr b)) a b))
    (if (null? (cdr count)) (car count)
        (smaller (car count) (smallest (cdr count)))))
  (define (remove v count)
    (if (null? count) count
        (if (equal? (caddr v) (caddr (car count))) (cdr count)
            (cons (car count) (remove v (cdr count))))))
  (if (null? count) '()
      (cons (smallest count) (sort-leaves (remove (smallest count) count)))))
;(get-freq (get-count "responsibility"))
(define (make-leaves freqs)
  (if (null? freqs) '()
      (cons (htree-leaf (caar freqs) (cdar freqs)) (make-leaves (cdr freqs)))))
;(sort-leaves (make-leaves (get-freq (get-count "responsibility"))))
(define (huffman freqs)
  (define (remove v count)
    (if (null? count) count
        (if (equal? (caddr v) (caddr (car count))) (cdr count)
            (cons (car count) (remove v (cdr count))))))
  (define (merger freqs-sorted tree)
    (cond ((null? freqs-sorted) tree)
          ((null? (cdr freqs-sorted)) tree)
          (else (merger (sort-leaves (cons (htree-node (car freqs-sorted) (cadr freqs-sorted))
                                                  (remove (car freqs-sorted) (remove (cadr freqs-sorted) freqs-sorted))))
                               (htree-node (car freqs-sorted) (cadr freqs-sorted))))))    
  (merger (sort-leaves (make-leaves freqs)) '()))
;(huffman (get-freq (get-count "responsibility")))
(define (codeWords t)
  (define (traverse t code)
    (cond ((null? t) '())
          ((equal? (car t) 'leaf) (list (cons (caddr t) code)))
          (else (append (traverse (htree-node-t0 t) (string-append code "0"))
                        (traverse (htree-node-t1 t) (string-append code "1"))))))
  (traverse t ""))
(codeWords (huffman (get-freq (get-count "hello"))))
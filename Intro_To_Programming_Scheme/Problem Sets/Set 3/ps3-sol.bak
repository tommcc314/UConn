; 1a Harmonic Numbers
(define (harmonic n)
  (if (= 1 n) 1
      (+ (/ 1 n) (harmonic (- n 1)))))
;(harmonic 4)
; 1b Euler Estimate
(define (Eulerest n)
  (abs (- (harmonic n) (log n))))
;(Eulerest 100)
; 2 Primality test
(define (prime? n)
  (define (divisor? k) (= 0 (modulo n k)))
  (define (divisors-upto k)
    (and (> k 1)
         (or (divisor? k) (divisors-upto (- k 1)))))
  (and (> n 1)
       (not (divisors-upto (- n 1)))))
; 2 Count Primes
(define (count-primes m)
  (cond ((= m 1) 0)
        ((prime? m) (+ 1 (count-primes (- m 1))))
        (else (count-primes (- m 1)))))
;(count-primes 2)

; 3 Relatively Prime
(define (rel-prime a b)
  (define (divides-both d)
    (and (= 0 (modulo a d))
         (= 0 (modulo b d))))
  (define (divisor-upto k)
    (and (> k 1)
         (or (divides-both k)
             (divisor-upto (- k 1)))))
  (not (divisor-upto (min a b))))

; 3 Count Relative Primes
(define (count-rel-prime n)
  (rel-prime-check n n))
(define (rel-prime-check a bound)
  (define (sub-count a b)
    (cond ((= b 1) 0)
          ((rel-prime a b) (+ 1 (sub-count a (- b 1))))
          (else (sub-count a (- b 1)))))
  (if (= a 1) 0
      (+ (sub-count a bound) (rel-prime-check (- a 1) bound))))
(count-rel-prime 10)
; 4a Lucas Numbers


; 4b Lucas Number Ratios


; 4c

;; This function represents the table shown in the PDF.
;; Simply "hard-code" the number of recursive call you believe
;; take place for inputs 3 through 6
(define (rec-call-lucas k)
    (cond ((= k 1)  -1)
          ((= k 2)  -1)
          ((= k 3)  -1)
          ((= k 4)  -1)
          ((= k 5)  -1)
          ((= k 6)  -1)
    ))

;; Do the same for the fast-lucas-helper
(define (rec-call-fast-lucas-helper k)
    (cond ((= k 1)  -1)
          ((= k 2)  -1)
          ((= k 3)  -1)
          ((= k 4)  -1)
          ((= k 5)  -1)
          ((= k 6)  -1)
    ))

; 5a Golden Ratio by continued fractions



; 5b Golden Ratio by continued square root



; 6 explain
(define (explain-interval-sum)
  (define a "One can never do  an induction on both inputs at once.")
  (define b "The base case isn't quite right. It needs to be updated to account for the two inductive calls.")
  (define c "The inductive case should be adding three things together.")
  (define d "The predicate to recognize the base case is wrong. One can go from m > n to m < n without ever seeing n = m.")
  (define e "I have no idea.")
  e)


; 7 Ackermann Function



; 8 Catalan numbers



; 9 pi-approx



; 10 Gauss-Legendre



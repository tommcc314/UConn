(define (create-heap v H1 H2)
  (list v H1 H2))
(define (h-root H) (car H))
(define (left H) (cadr H))
(define (right H) (caddr H))
(define (heap-insert f x H)
  (cond ((null? H) (create-heap x '() '()))
        ((f x (h-root H)) (create-heap x (right H) (heap-insert f (h-root H) (left H))))
        (else (create-heap (h-root H) (right H) (heap-insert f x (left H))))))
(define (heap-insert-list f x-list H)
  (if (null? x-list) H
      (heap-insert-list f (cdr x-list) (heap-insert f (car x-list) H))))
(define (combine f Ha Hb)
  (cond ((null? Ha) Hb)
        ((null? Hb) Ha)
        ((f (h-root Ha) (h-root Hb))
         (create-heap (h-root Ha) Hb (combine f (left Ha) (right Ha))))
        (else (create-heap (h-root Hb) Ha (combine f (left Hb) (right Hb))))))
(define (empty? H)
  (null? H))
(define (heap-remove f H)
  (if (empty? H) H
      (combine f (left H) (right H))))
(define (equalize-heaps heap-pair)
  (let ((size1 (caar heap-pair))
        (size2 (cadr heap-pair))
        (heap1 (cdar heap-pair))
        (heap2 (cddr heap-pair)))
  (cond ((< (abs (- size1 size2)) 2) heap-pair)
        ((> (- size1 size2) 1) (equalize-heaps (cons (cons (- size1 1) (heap-remove > heap1))
                                                     (cons (+ size2 1) (heap-insert < (car heap1) heap2)))))
        ((> (- size2 size1) 1) (equalize-heaps (cons (cons (+ size1 1) (heap-insert > (car heap2) heap1))
                                                     (cons (- size2 1) (heap-remove < heap2))))))))
;(heap-insert-root 6 '(9 (11 () ()) () ()))
;(heap-remove-root '(9 (11 () ()) () ()))
;(equalize-heaps '((1 1 () ()) 5 6 (8 (10 () ()) ()) (7 (9 () ()) ())))
(define (add-number x heap-pair)
  (define (insert-number x heap-pair)
    (let ((size1 (caar heap-pair))
          (size2 (cadr heap-pair))
          (heap1 (cdar heap-pair))
          (heap2 (cddr heap-pair)))
      (if (< x (car heap1)) (cons (cons (+ size1 1) (heap-insert > x heap1)) (cons size2 heap2))
          (cons (cons size1 heap1) (cons (+ size2 1) (heap-insert < x heap2))))))
  (equalize-heaps (insert-number x heap-pair)))
;(add-number 5 '((3 7 (1 () ()) (6 () ())) 3 8 (9 () ()) (10 () ())))
(define (get-median heap-pair)
  (let ((size1 (caar heap-pair))
        (size2 (cadr heap-pair))
        (heap1 (cdar heap-pair))
        (heap2 (cddr heap-pair)))
    (cond ((= size1 size2) (/ (+ (car heap1) (car heap2)) 2))
          ((< size1 size2) (car heap2))
          (else (car heap1)))))
(get-median '((4 7 (6 () ()) (5 () (1 () ()))) 3 8 (9 () ()) (10 () ())))
        